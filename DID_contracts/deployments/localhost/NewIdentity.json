{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_register",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "hashedID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "newRoot",
          "type": "bytes32"
        }
      ],
      "name": "IdentityCreatChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "hashedID",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        }
      ],
      "name": "IdentityCreated",
      "type": "event"
    },
    {
      "stateMutability": "nonpayable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hashedID",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "changeAssociatedAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hashedID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "changeOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hashedID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "createAssociatedAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hashedID",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "_root",
          "type": "bytes32"
        }
      ],
      "name": "createIdentity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hashedID",
          "type": "bytes32"
        }
      ],
      "name": "getAssociatedAddress",
      "outputs": [
        {
          "internalType": "address[5]",
          "name": "",
          "type": "address[5]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hashedID",
          "type": "bytes32"
        }
      ],
      "name": "getOwnerHistory",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_hashedID",
          "type": "bytes32"
        },
        {
          "internalType": "address[]",
          "name": "_disableAddress",
          "type": "address[]"
        },
        {
          "internalType": "bool",
          "name": "_deleteAssociatedAddress",
          "type": "bool"
        }
      ],
      "name": "recoveryByOwnerHistory",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "register",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_proofA",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "_proofB",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_proofC",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[4]",
          "name": "_pubSignals",
          "type": "uint256[4]"
        }
      ],
      "name": "updateIdentity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier",
      "outputs": [
        {
          "internalType": "contract Verify_EnigmaRoot",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[2]",
          "name": "_pA",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "_pB",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_pC",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[4]",
          "name": "_pubSignals",
          "type": "uint256[4]"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2c10f6159271f4791c00e24181fc0a5f8107cde962b534386a816e2fed594d18",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "3054319",
    "logsBloom": "0x
    "blockHash": "0xf79ce006bd559d25b3c36670164cef29f702d3aa43f6ba2d2d6c8b2b2155ffa6",
    "transactionHash": "0x2c10f6159271f4791c00e24181fc0a5f8107cde962b534386a816e2fed594d18",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "3054319",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "a738c8d065f713a232c9fbe63f796ba8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_register\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hashedID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"newRoot\",\"type\":\"bytes32\"}],\"name\":\"IdentityCreatChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hashedID\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"IdentityCreated\",\"type\":\"event\"},{\"stateMutability\":\"nonpayable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hashedID\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeAssociatedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hashedID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"changeOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hashedID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"createAssociatedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hashedID\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_root\",\"type\":\"bytes32\"}],\"name\":\"createIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hashedID\",\"type\":\"bytes32\"}],\"name\":\"getAssociatedAddress\",\"outputs\":[{\"internalType\":\"address[5]\",\"name\":\"\",\"type\":\"address[5]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hashedID\",\"type\":\"bytes32\"}],\"name\":\"getOwnerHistory\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_hashedID\",\"type\":\"bytes32\"},{\"internalType\":\"address[]\",\"name\":\"_disableAddress\",\"type\":\"address[]\"},{\"internalType\":\"bool\",\"name\":\"_deleteAssociatedAddress\",\"type\":\"bool\"}],\"name\":\"recoveryByOwnerHistory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"register\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_proofA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"_proofB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_proofC\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"_pubSignals\",\"type\":\"uint256[4]\"}],\"name\":\"updateIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier\",\"outputs\":[{\"internalType\":\"contract Verify_EnigmaRoot\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[2]\",\"name\":\"_pA\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"_pB\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_pC\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[4]\",\"name\":\"_pubSignals\",\"type\":\"uint256[4]\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/NewIdentity.sol\":\"NewIdentity\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"contracts/NewIdentity.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n// \\u672c\\u5408\\u7ea6\\u5b9e\\u73b0\\u529f\\u80fd\\uff1acreateIdentity changeOwner\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\nimport \\\"./Verify_EnigmaRoot.sol\\\";\\n\\ncontract NewIdentity is Verify_EnigmaRoot, ReentrancyGuard {\\n    struct Identity {\\n        // uint256 DID;\\n        address owner;\\n        bytes32 root;\\n        address[5] assciatedAddress;\\n        mapping(bytes32 => bool) used;\\n        // mapping(address => bool) blackLists;\\n        mapping(address => uint256) ownerHistory;\\n        address[] ownerKeys;\\n    }\\n    //\\u6210\\u4e3a\\u6cd5\\u5b98\\u7684\\u6743\\u5229\\uff0c\\u53ef\\u4ee5disable\\u5176\\u4ed6\\u7684\\u5730\\u5740\\u3002\\u8fd9\\u4e2a\\u6743\\u5229\\u53ea\\u6709\\u5728\\u4f7f\\u7528enigma\\u66f4\\u65b0\\u7684address\\u624d\\u80fd\\u62e5\\u6709\\uff0c\\u5e76\\u4e14\\u53ea\\u80fd\\u4f7f\\u7528\\u4e00\\u6b21\\u3002\\u9632\\u6b62\\u65e5\\u540e\\u8fd9\\u4e2a\\u8d26\\u6237\\u7684\\u79c1\\u94a5\\u88ab\\u76d7\\uff0c\\u76d7\\u7a83\\u8005\\u4f7f\\u7528\\u8fd9\\u4e2a\\u8d26\\u6237\\u975e\\u6cd5disable\\u5176\\u4ed6\\u5730\\u5740\\u3002\\n    // bool judge;\\n    //\\u88ab\\u8bbe\\u7f6e\\u4e3atrue\\u540e\\uff0c\\u8be5\\u8d26\\u6237\\u6240\\u505a\\u7684\\u4efb\\u4f55\\u64cd\\u4f5c\\u90fd\\u4f1a\\u4f7f\\u5176\\u53d8\\u56defalse\\n\\n    Verify_EnigmaRoot public immutable verifier;\\n    mapping(bytes32 => Identity) internal identities;\\n\\n    address public register;\\n\\n    //**************************************************************\\n    // Event definitions\\n    //**************************************************************\\n\\n    event IdentityCreated(bytes32 indexed hashedID, address owner, bytes32 root);\\n    event IdentityCreatChanged(bytes32 indexed hashedID, address newOwner, bytes32 newRoot);\\n\\n    constructor(address _register) {\\n        bytes32 _salt = keccak256(abi.encodePacked(msg.sender, block.timestamp)); //\\u8fd9\\u662f\\u90e8\\u7f72\\u5408\\u7ea6\\u7684\\u65f6\\u5019\\u751f\\u6210\\u7684salt\\uff0c\\u7528\\u4e8ecreate2\\n        verifier = new Verify_EnigmaRoot{salt: _salt}();\\n        register = _register;\\n    }\\n\\n    modifier onlyRegister() {\\n        require(msg.sender == register, \\\"Only the register contract can call this function\\\");\\n        _;\\n    }\\n\\n    modifier Owner_or_AssociatedAddress(bytes32 _hashedID) {\\n        bool pass = false;\\n        //owner?\\n        if (msg.sender == identities[_hashedID].owner) {\\n            pass = true;\\n        } else {\\n            //AssociatedAddress?\\n            for (uint256 i = 0; i < identities[_hashedID].assciatedAddress.length; i++) {\\n                if (msg.sender == identities[_hashedID].assciatedAddress[i]) {\\n                    pass = true;\\n                    break;\\n                }\\n            }\\n        }\\n\\n        require(pass, \\\"Only the owner or associated address can call this function\\\");\\n        _;\\n    }\\n\\n    //createIdentity\\u4e2d\\u540c\\u4e00\\u4e2ahashedID\\u53ea\\u80fd\\u88abregister\\u8c03\\u7528\\u4e00\\u6b21\\n    //\\u672c\\u51fd\\u6570front runner\\u9ad8gas\\u653b\\u51fb\\u4f9d\\u7136\\u5b89\\u5168\\uff0c\\u56e0\\u4e3a\\u53ea\\u6709register\\u80fd\\u591f\\u8c03\\u7528\\u672c\\u51fd\\u6570\\uff0c\\u5e76\\u4e14owner\\u548croot\\u503cregister\\u65e0\\u6cd5\\u81ea\\u5df1\\u6307\\u5b9a\\u3002\\n    function createIdentity(\\n        bytes32 _hashedID,\\n        // uint256 _DID,\\n        address _owner,\\n        bytes32 _root\\n    ) external onlyRegister nonReentrant {\\n        _root = avoidOverflowAttack(_root);\\n        if (identities[_hashedID].owner != address(0)) {\\n            revert(\\\"Identity already exists\\\");\\n        }\\n        // if (_hashedID.length != 32 || _root.length != 32) {\\n        //     revert(\\\"The length of hashedID or root is not 32!\\\");\\n        // }\\n        console.logBytes32(_hashedID);\\n        console.log(_owner);\\n        console.logBytes32(_root);\\n        identities[_hashedID].owner = _owner; //\\u6ce8\\u518cowner\\n        //owner\\u52a0\\u5165ownerHistory\\uff0c\\u8bb0\\u5f55\\u65f6\\u95f4\\u6233\\n        identities[_hashedID].ownerHistory[_owner] = block.timestamp;\\n        identities[_hashedID].ownerKeys.push(_owner);\\n\\n        identities[_hashedID].root = _root; //\\u6ce8\\u518croot\\n        identities[_hashedID].used[_root] = false; //\\u6807\\u6ce8root\\u672a\\u4f7f\\u7528\\n\\n        emit IdentityCreated(_hashedID, _owner, _root);\\n    }\\n\\n    function createAssociatedAddress(bytes32 _hashedID, address _address)\\n        external\\n        Owner_or_AssociatedAddress(_hashedID)\\n        nonReentrant\\n    {\\n        require(identities[_hashedID].assciatedAddress.length < 5, \\\"The number of associated address is up to 5\\\");\\n        identities[_hashedID].assciatedAddress[identities[_hashedID].assciatedAddress.length] = _address;\\n    }\\n\\n    function changeOwner(bytes32 _hashedID, address _address)\\n        external\\n        Owner_or_AssociatedAddress(_hashedID)\\n        nonReentrant\\n    {\\n        //\\u5982\\u679c\\u5c06owner\\u8f6c\\u79fb\\u7ed9old owner\\uff0c\\u90a3\\u4e48\\u4e0d\\u53ef\\u4ee5\\u91cd\\u7f6e\\u5176\\u65f6\\u95f4\\n        //\\u4ee5\\u4e0bif\\u4e3atrue\\u65f6\\u4ee3\\u8868\\u8fd9\\u4e2a_address\\u4e0d\\u5728ownerHistory\\u4e2d\\uff0c\\u9700\\u8981\\u5c06\\u5176\\u52a0\\u5165ownerHistory\\u5e76\\u8bbe\\u7f6e\\u65f6\\u95f4\\n        if (identities[_hashedID].ownerHistory[_address] == 0) {\\n            identities[_hashedID].ownerHistory[_address] = block.timestamp;\\n            identities[_hashedID].ownerKeys.push(_address);\\n        }\\n        //\\u5982\\u679c\\u672c\\u6765\\u5c31\\u5728ownerHistory\\u4e2d\\uff0c\\u90a3\\u4e48\\u4e0d\\u9700\\u8981\\u91cd\\u7f6e\\u65f6\\u95f4\\n        identities[_hashedID].owner = _address;\\n    }\\n\\n    function changeAssociatedAddress(bytes32 _hashedID, uint256 index, address _address)\\n        external\\n        Owner_or_AssociatedAddress(_hashedID)\\n        nonReentrant\\n    {\\n        require(index < 5, \\\"The index is between 0~4\\\");\\n        identities[_hashedID].assciatedAddress[index] = _address;\\n    }\\n\\n    //\\u7528\\u4e8e\\u89e3\\u51b3AssociatedAddress\\u88ab\\u76d7\\u5e76\\u66f4\\u6539owner\\u7684\\u60c5\\u51b5\\u3002\\u6b64\\u65f6\\u653b\\u51fb\\u8005\\u5e76\\u4e0d\\u638c\\u63e1current owner\\u7684\\u79c1\\u94a5\\uff0c\\u53ea\\u80fd\\u628a\\u5f53\\u524downer\\u6362\\u4e3a\\u65b0\\u7684\\u6076\\u610fowner\\u3002\\n    //\\u8fd9\\u4e5f\\u5c31\\u4f7f\\u5f97\\u6076\\u610fowner\\u521b\\u5efa\\u65f6\\u95f4\\u665a\\uff0c\\u53ef\\u4ee5\\u88ab\\u65e9\\u671f\\u7684owner\\u6062\\u590d\\u3002\\u5220\\u9664\\u6076\\u610fassociated address\\u3002\\u53ea\\u80fd\\u5220\\u9664\\u521b\\u5efa\\u65f6\\u95f4\\u8f83\\u665a\\u7684ownerHistory\\u4e2d\\u7684\\u6076\\u610fowner\\u3002\\n    function recoveryByOwnerHistory(bytes32 _hashedID, address[] memory _disableAddress, bool _deleteAssociatedAddress)\\n        external\\n        nonReentrant\\n    {\\n        //\\u5982\\u679cmsg.sender\\u5728ownerHistory\\u4e2d\\u4e14\\u65f6\\u95f4\\u6bd4owner\\u65e9\\uff0c\\u90a3\\u4e48\\u53ef\\u4ee5\\u6062\\u590downer\\n        require(\\n            identities[_hashedID].ownerHistory[msg.sender] != 0\\n                && identities[_hashedID].ownerHistory[msg.sender]\\n                    < identities[_hashedID].ownerHistory[identities[_hashedID].owner],\\n            \\\"msg.sender not in ownerHistory or the time is later than current owner\\\"\\n        );\\n        identities[_hashedID].owner = msg.sender;\\n        //\\u662f\\u5426\\u5220\\u9664\\u6076\\u610f\\u7684associated address\\n        if (_deleteAssociatedAddress) {\\n            delete identities[_hashedID].assciatedAddress;\\n        }\\n        //\\u5c06\\u6076\\u610f\\u7684\\u5730\\u5740\\u4eec\\u4eceownerHistory\\u4e2d\\u5220\\u9664\\n        if (_disableAddress[0] != address(0)) {\\n            for (uint256 i = 0; i < _disableAddress.length; i++) {\\n                //\\u5982\\u679cmsg.sender\\u7684\\u65f6\\u95f4\\u6bd4_disableAddress\\u65f6\\u95f4\\u65e9\\uff0c\\u90a3\\u4e48\\u53ef\\u4ee5\\u5220\\u9664\\u8be5_disableAddress\\n                //\\u8fd9\\u610f\\u5473\\u7740recoveryByOwnerHistory\\u673a\\u5236\\u4e0b\\uff0cowner history\\u6c38\\u8fdc\\u4e0d\\u4f1a\\u88ab\\u5220\\u7a7a\\uff0c\\u7ed9\\u539f\\u59cbowner\\u6062\\u590d\\u4f59\\u5730\\u3002\\n                if (\\n                    identities[_hashedID].ownerHistory[msg.sender]\\n                        < identities[_hashedID].ownerHistory[_disableAddress[i]]\\n                ) {\\n                    // \\u5220\\u9664mapping\\u4e2d\\u7684\\u952e\\u503c\\u5bf9\\n                    delete identities[_hashedID].ownerHistory[\\n                        _disableAddress[i]\\n                    ];\\n                    // \\u5220\\u9664\\u6570\\u7ec4\\u4e2d\\u5bf9\\u5e94\\u7684\\u5143\\u7d20\\n                    delete identities[_hashedID].ownerKeys[\\n                        getAssociatedAddressIndex(\\n                            _hashedID,\\n                            _disableAddress[i]\\n                        )\\n                    ];\\n                }\\n            }\\n        }\\n    }\\n\\n    //********************************************************************* */\\n    //From: https://stackoverflow.com/questions/67893318/solidity-how-to-represent-bytes32-as-string\\n    //Author: Mikhail Vladimirov\\n    //convert bytes32 to string\\n\\n    function toHex16(bytes16 data) internal pure returns (bytes32 result) {\\n        result = (bytes32(data) & 0xFFFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000)\\n            | ((bytes32(data) & 0x0000000000000000FFFFFFFFFFFFFFFF00000000000000000000000000000000) >> 64);\\n        result = (result & 0xFFFFFFFF000000000000000000000000FFFFFFFF000000000000000000000000)\\n            | ((result & 0x00000000FFFFFFFF000000000000000000000000FFFFFFFF0000000000000000) >> 32);\\n        result = (result & 0xFFFF000000000000FFFF000000000000FFFF000000000000FFFF000000000000)\\n            | ((result & 0x0000FFFF000000000000FFFF000000000000FFFF000000000000FFFF00000000) >> 16);\\n        result = (result & 0xFF000000FF000000FF000000FF000000FF000000FF000000FF000000FF000000)\\n            | ((result & 0x00FF000000FF000000FF000000FF000000FF000000FF000000FF000000FF0000) >> 8);\\n        result = ((result & 0xF000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000) >> 4)\\n            | ((result & 0x0F000F000F000F000F000F000F000F000F000F000F000F000F000F000F000F00) >> 8);\\n        result = bytes32(\\n            0x3030303030303030303030303030303030303030303030303030303030303030 + uint256(result)\\n                + (\\n                    ((uint256(result) + 0x0606060606060606060606060606060606060606060606060606060606060606) >> 4)\\n                        & 0x0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F\\n                ) * 7\\n        );\\n    }\\n\\n    function toHex(bytes32 data) internal pure returns (string memory) {\\n        return string(abi.encodePacked(\\\"0x\\\", toHex16(bytes16(data)), toHex16(bytes16(data << 128))));\\n    }\\n\\n    //********************************************************************* */\\n    //From: https://github.com/WeBankBlockchain/SmartDev-Contract/blob/master/contracts/base_type/string/LibString.sol\\n    //convert string to Lower case\\n\\n    function toLowercase(string memory src) internal pure returns (string memory) {\\n        bytes memory srcb = bytes(src);\\n        for (uint256 i = 0; i < srcb.length; i++) {\\n            bytes1 b = srcb[i];\\n            if (b >= \\\"A\\\" && b <= \\\"Z\\\") {\\n                b |= 0x20;\\n                srcb[i] = b;\\n            }\\n        }\\n        return src;\\n    }\\n\\n    //********************************************************************* */\\n    //From: https://github.com/WeBankBlockchain/SmartDev-Contract/blob/778e66d50d38469fc58b7bfa40d86140f2fcda5d/contracts/business_template/gov_office/utils/TypeConvertUtil.sol#L80\\n    //convert uint to string\\n\\n    function uintToString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    //********************************************************************* */\\n\\n    function verifySignature(string memory message, bytes memory sig) internal pure returns (address) {\\n        bytes32 messageHash =\\n            keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", uintToString(bytes(message).length), message));\\n        bytes32 r;\\n        bytes32 s;\\n        uint8 v;\\n\\n        // \\u68c0\\u67e5\\u7b7e\\u540d\\u5b57\\u8282\\u3002\\u5982\\u679c\\u4e0d\\u662f65\\u4e2a\\u5b57\\u8282\\uff0c\\u8fd4\\u56de\\u201c0\\u201d\\u3002\\n        if (sig.length != 65) {\\n            return (address(0));\\n        }\\n\\n        // \\u5206\\u5272\\u7b7e\\u540d\\u5b57\\u8282\\n        assembly {\\n            r := mload(add(sig, 0x20))\\n            s := mload(add(sig, 0x40))\\n            v := byte(0, mload(add(sig, 0x60)))\\n        }\\n\\n        // Version of signature should be 27 or 28, but 0 and 1 are also possible versions\\n        if (v < 27) {\\n            v += 27;\\n        }\\n\\n        // If the version is correct return the signer address\\n        if (v != 27 && v != 28) {\\n            return (address(0));\\n        } else {\\n            // solium-disable-next-line arg-overflow\\n            return ecrecover(messageHash, v, r, s);\\n        }\\n    }\\n\\n    function avoidOverflowAttack(bytes32 root) internal pure returns (bytes32) {\\n        uint256 bn128_Prime = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n        return bytes32(uint256(root) % bn128_Prime);\\n    }\\n\\n    //\\u7528\\u6237\\u81ea\\u884c\\u66f4\\u65b0\\u81ea\\u5df1\\u7684identity\\u6216\\u8005\\u66f4\\u65b0enigma\\n    //\\u5982\\u679cowner\\u79c1\\u94a5\\u88ab\\u76d7\\uff0c\\u751a\\u81f3ownerHistory\\u4e2d\\u6700\\u521d\\u59cb\\u7684owner\\u79c1\\u94a5\\u88ab\\u76d7\\uff0c\\u90a3\\u4e48\\u53ea\\u80fd\\u901a\\u8fc7updateIdentity\\u7684enigma\\u91cd\\u65b0\\u83b7\\u53d6DID\\u63a7\\u5236\\u6743\\n    //\\u5e76\\u4e14\\u5220\\u9664\\u88ab\\u76d7\\u7684\\u548c\\u6076\\u610f\\u7684ownerHistory\\u4e2d\\u7684\\u5730\\u5740\\uff0c\\u4ee5\\u53ca\\u5220\\u9664\\u6076\\u610f\\u7684associated address\\n    function updateIdentity(\\n        uint256[2] calldata _proofA,\\n        uint256[2][2] calldata _proofB,\\n        uint256[2] calldata _proofC,\\n        uint256[4] calldata _pubSignals\\n    ) external nonReentrant {\\n        console.log(_proofA[0]);\\n        console.log(_proofA[1]);\\n        console.log(_proofB[0][0]);\\n        console.log(_proofB[0][1]);\\n        console.log(_proofB[1][0]);\\n        console.log(_proofB[1][1]);\\n        console.log(_proofC[0]);\\n        console.log(_proofC[1]);\\n        for (uint256 i = 0; i < _pubSignals.length; i++) {\\n            console.log(_pubSignals[i]);\\n        }\\n        // console.logBytes32(_root);\\n        // console.log(_root.length);\\n        // console.logBytes32(_hashedID);\\n        // console.log(_hashedID.length);\\n        // console.log(_newowner);\\n        // console.logBytes32(_newroot);\\n        // console.logBytes(_sig);\\n        // console.log(verifySignature(toLowercase(toHex(_newroot)), _sig));\\n\\n        //\\u9632\\u6b62CVE-2023-33252 overflow double pay attack\\n        // _root = avoidOverflowAttack(_root);\\n        // _newroot = avoidOverflowAttack(_newroot);\\n\\n        // require(\\n        //     _root.length == 32 && _hashedID.length == 32 && _newroot.length == 32,\\n        //     \\\"The length of root or hashedID or newroot is not 32!\\\"\\n        // );\\n\\n        // require(identities[_hashedID].root == _root, \\\"Root does not match the root of the identity\\\");\\n        // require(_newroot != _root, \\\"The new root can not be the same as the old root\\\");\\n\\n        // //\\u6240\\u6709\\u8f93\\u5165\\u8fc7\\u7684root\\u548cnewroot\\u4e0d\\u80fd\\u6709\\u91cd\\u590d\\u3002\\n        // //\\u5e76\\u4e14\\u76f4\\u63a5\\u5b58\\u50a8root\\u548cnewroot\\u800c\\u4e0d\\u5b58\\u50a8proofA\\u548cB\\u662f\\u4e3a\\u4e86\\u9632\\u6b62groth16\\u6269\\u5c55\\u653b\\u51fb\\n        // require(!identities[_hashedID].used[_root], \\\"Root is used\\\");\\n        // require(!identities[_hashedID].used[_newroot], \\\"Newroot is used\\\"); //newroot\\u4e0d\\u80fd\\u4e3a\\u4e4b\\u524d\\u7528\\u8fc7\\u7684root\\n\\n        // require( //\\u8fd9\\u6837\\u80fd\\u591f\\u4fdd\\u8bc1\\u6076\\u610f\\u7684owner\\u5728\\u628a\\u81ea\\u5df1DID\\u540d\\u8a89\\u641e\\u81ed\\u540e\\u6076\\u610f\\u8f6c\\u7ed9\\u65e0\\u8f9c\\u7684\\u4eba\\u3002\\n        //     //\\u5e76\\u4e14\\u4e5f\\u80fd\\u9632\\u6b62\\u6709front runner\\u4ee5\\u9ad8gas fee\\u62a2\\u5148\\u628aDID\\u8f6c\\u7ed9\\u522b\\u4eba\\u3002\\n        //     //_newowner\\u53ef\\u4ee5\\u7b49\\u4e8e\\u5f53\\u524downer\\uff0c\\u5b9e\\u73b0owner\\u80fd\\u591f\\u5b9a\\u671f\\u66f4\\u65b0\\u81ea\\u5df1\\u7684enigma\\u3002\\n        //     _newowner == msg.sender,\\n        //     \\\"The identity can not be transferred to another address\\\"\\n        // );\\n\\n        // //\\u6bcf\\u6b21\\u7684sig\\u5fc5\\u987b\\u4e0d\\u540c,\\u9632\\u6b62\\u91cd\\u653e\\u653b\\u51fb\\n        // //\\u7b7e\\u540d\\u8005\\u7684\\u5730\\u5740\\u5fc5\\u987b\\u4e3aowner history\\u4e2d\\u7684\\u5730\\u5740\\n        // //convert _newroot to lower case string, with sig to get the signer address\\n        // //because _newroot never repeat, also the sig never repeat to avoid replay attack\\n        // //_newroot\\u548csig\\u6c38\\u8fdc\\u90fd\\u4e0d\\u4f1a\\u91cd\\u590d\\uff0c\\u9632\\u6b62\\u91cd\\u653e\\u653b\\u51fb\\u3002\\n        // require(\\n        //     identities[_hashedID].ownerHistory[verifySignature(toLowercase(toHex(_newroot)), _sig)] != 0,\\n        //     \\\"Signature is not valid\\\"\\n        // );\\n\\n        require(verifier.verifyProof(_proofA, _proofB, _proofC, _pubSignals), \\\"Proof is not valid\\\");\\n\\n        // //\\u5c06\\u6076\\u610f\\u7684\\u5730\\u5740\\u4eec\\u4eceownerHistory\\u4e2d\\u5220\\u9664\\n        // //\\u4f7f\\u7528enigma\\u7684newowner\\u5728\\u672c\\u51fd\\u6570\\u5185\\u53ef\\u4ee5\\u5220\\u9664\\u9664\\u81ea\\u5df1\\u4efb\\u4f55\\u5730\\u5740\\uff0c\\u4f46\\u662f\\u53ea\\u80fd\\u5220\\u9664\\u4e00\\u6b21\\u3002\\n        // if (_disableAddress[0] != address(0)) {\\n        //     for (uint256 i = 0; i < _disableAddress.length; i++) {\\n        //         if (_disableAddress[i] != msg.sender) {\\n        //             // \\u5220\\u9664mapping\\u4e2d\\u7684\\u952e\\u503c\\u5bf9\\n        //             delete identities[_hashedID].ownerHistory[\\n        //                 _disableAddress[i]\\n        //             ];\\n        //             // \\u5220\\u9664\\u6570\\u7ec4\\u4e2d\\u5bf9\\u5e94\\u7684\\u5143\\u7d20\\n        //             delete identities[_hashedID].ownerKeys[\\n        //                 getAssociatedAddressIndex(\\n        //                     _hashedID,\\n        //                     _disableAddress[i]\\n        //                 )\\n        //             ];\\n        //         }\\n        //     }\\n        // }\\n        // //\\u662f\\u5426\\u5220\\u9664\\u6076\\u610f\\u7684associated address\\n        // if (_deleteAssociatedAddress) {\\n        //     delete identities[_hashedID].assciatedAddress;\\n        // }\\n        // //\\u5982\\u679c\\u5c06newowner\\u5b58\\u5728\\u4e8eowner history\\uff0c\\u90a3\\u4e48\\u4e0d\\u53ef\\u4ee5\\u91cd\\u7f6e\\u5176\\u65f6\\u95f4\\n        // //\\u4ee5\\u4e0bif\\u4e3atrue\\u65f6\\u4ee3\\u8868_newowner\\u4e0d\\u5728ownerHistory\\u4e2d\\uff0c\\u9700\\u8981\\u5c06\\u5176\\u52a0\\u5165ownerHistory\\u5e76\\u8bbe\\u7f6e\\u65f6\\u95f4\\n        // if (identities[_hashedID].ownerHistory[_newowner] == 0) {\\n        //     identities[_hashedID].ownerHistory[_newowner] = block.timestamp;\\n        //     identities[_hashedID].ownerKeys.push(_newowner);\\n        // }\\n\\n        // identities[_hashedID].used[_root] = true; //\\u8be5root\\u6807\\u8bb0\\u4e3a\\u7528\\u8fc7\\n        // identities[_hashedID].owner = _newowner;\\n        // identities[_hashedID].root = _newroot;\\n\\n        // emit IdentityCreatChanged(_hashedID, _newowner, _newroot);\\n    }\\n\\n    function getAssociatedAddress(bytes32 _hashedID) external view returns (address[5] memory) {\\n        return identities[_hashedID].assciatedAddress;\\n    }\\n\\n    function getOwnerHistory(bytes32 _hashedID) external view returns (address[] memory) {\\n        return identities[_hashedID].ownerKeys;\\n    }\\n\\n    function getAssociatedAddressIndex(bytes32 _hashedID, address _address) internal view returns (uint256 index) {\\n        for (uint256 i = 0; i < identities[_hashedID].assciatedAddress.length; i++) {\\n            if (identities[_hashedID].assciatedAddress[i] == _address) {\\n                index = i;\\n                return index;\\n            }\\n        }\\n        revert(\\\"Index not found!\\\"); // \\u5982\\u679c\\u672a\\u627e\\u5230\\u952e\\n    }\\n\\n    /// @dev DON'T give me your money.\\n    fallback() external {}\\n}\\n\",\"keccak256\":\"0x3c3017ae8dee3ebb71165c97d206e469df7fd1583e643837749a21378d1b6e50\",\"license\":\"GPL-3.0\"},\"contracts/Verify_EnigmaRoot.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n/*\\n    Copyright 2021 0KIMS association.\\n\\n    This file is generated with [snarkJS](https://github.com/iden3/snarkjs).\\n\\n    snarkJS is a free software: you can redistribute it and/or modify it\\n    under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n\\n    snarkJS is distributed in the hope that it will be useful, but WITHOUT\\n    ANY WARRANTY; without even the implied warranty of MERCHANTABILITY\\n    or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public\\n    License for more details.\\n\\n    You should have received a copy of the GNU General Public License\\n    along with snarkJS. If not, see <https://www.gnu.org/licenses/>.\\n*/\\n\\npragma solidity >=0.7.0 <0.9.0;\\n\\ncontract Verify_EnigmaRoot {\\n    // Scalar field size\\n    uint256 constant r = 21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n    // Base field size\\n    uint256 constant q = 21888242871839275222246405745257275088696311157297823662689037894645226208583;\\n\\n    // Verification Key data\\n    uint256 constant alphax = 20491192805390485299153009773594534940189261866228447918068658471970481763042;\\n    uint256 constant alphay = 9383485363053290200918347156157836566562967994039712273449902621266178545958;\\n    uint256 constant betax1 = 4252822878758300859123897981450591353533073413197771768651442665752259397132;\\n    uint256 constant betax2 = 6375614351688725206403948262868962793625744043794305715222011528459656738731;\\n    uint256 constant betay1 = 21847035105528745403288232691147584728191162732299865338377159692350059136679;\\n    uint256 constant betay2 = 10505242626370262277552901082094356697409835680220590971873171140371331206856;\\n    uint256 constant gammax1 = 11559732032986387107991004021392285783925812861821192530917403151452391805634;\\n    uint256 constant gammax2 = 10857046999023057135944570762232829481370756359578518086990519993285655852781;\\n    uint256 constant gammay1 = 4082367875863433681332203403145435568316851327593401208105741076214120093531;\\n    uint256 constant gammay2 = 8495653923123431417604973247489272438418190587263600148770280649306958101930;\\n    uint256 constant deltax1 = 9408110742781728201894131805141475352945788360589902876463986242976978065722;\\n    uint256 constant deltax2 = 10203663760889134261047342810737004918164301578491565523695933495285825236085;\\n    uint256 constant deltay1 = 10087914231745341029668523324396098214366033049622133396918728601284968479120;\\n    uint256 constant deltay2 = 2583334688019922179655066023016062732404848340275729528519937363108312388660;\\n\\n    uint256 constant IC0x = 17900870629455835698490772258639837903241155543383666356798698347167442865926;\\n    uint256 constant IC0y = 12732158572879394977404805264695667432277773010076751071757479603843001609349;\\n\\n    uint256 constant IC1x = 18280690130853811013859897743633823717581084064935752295377655181679433580464;\\n    uint256 constant IC1y = 12717010695920071014121532704200973870034470588151939158846630965244019713299;\\n\\n    uint256 constant IC2x = 6409202994627953956179455604561528479513155039233712560278679871085477003063;\\n    uint256 constant IC2y = 4925489950914948593615226567000174867014471771353015783119293193536457304379;\\n\\n    uint256 constant IC3x = 17048991572161252794355425277309485798352342419239508271652496667764467595393;\\n    uint256 constant IC3y = 10395430061106091011998736436527413064685464613710060444239624108035463745760;\\n\\n    uint256 constant IC4x = 5711496941402198620591921542694652991179036854865443685094870345693403882694;\\n    uint256 constant IC4y = 1470873186573264926793084517287614394754131350403325200846150604503888686563;\\n\\n    // Memory data\\n    uint16 constant pVk = 0;\\n    uint16 constant pPairing = 128;\\n\\n    uint16 constant pLastMem = 896;\\n\\n    function verifyProof(\\n        uint256[2] calldata _pA,\\n        uint256[2][2] calldata _pB,\\n        uint256[2] calldata _pC,\\n        uint256[4] calldata _pubSignals\\n    ) public view returns (bool) {\\n        assembly {\\n            function checkField(v) {\\n                if iszero(lt(v, q)) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            // G1 function to multiply a G1 value(x,y) to value in an address\\n            function g1_mulAccC(pR, x, y, s) {\\n                let success\\n                let mIn := mload(0x40)\\n                mstore(mIn, x)\\n                mstore(add(mIn, 32), y)\\n                mstore(add(mIn, 64), s)\\n\\n                success := staticcall(sub(gas(), 2000), 7, mIn, 96, mIn, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n\\n                mstore(add(mIn, 64), mload(pR))\\n                mstore(add(mIn, 96), mload(add(pR, 32)))\\n\\n                success := staticcall(sub(gas(), 2000), 6, mIn, 128, pR, 64)\\n\\n                if iszero(success) {\\n                    mstore(0, 0)\\n                    return(0, 0x20)\\n                }\\n            }\\n\\n            function checkPairing(pA, pB, pC, pubSignals, pMem) -> isOk {\\n                let _pPairing := add(pMem, pPairing)\\n                let _pVk := add(pMem, pVk)\\n\\n                mstore(_pVk, IC0x)\\n                mstore(add(_pVk, 32), IC0y)\\n\\n                // Compute the linear combination vk_x\\n\\n                g1_mulAccC(_pVk, IC1x, IC1y, calldataload(add(pubSignals, 0)))\\n\\n                g1_mulAccC(_pVk, IC2x, IC2y, calldataload(add(pubSignals, 32)))\\n\\n                g1_mulAccC(_pVk, IC3x, IC3y, calldataload(add(pubSignals, 64)))\\n\\n                g1_mulAccC(_pVk, IC4x, IC4y, calldataload(add(pubSignals, 96)))\\n\\n                // -A\\n                mstore(_pPairing, calldataload(pA))\\n                mstore(add(_pPairing, 32), mod(sub(q, calldataload(add(pA, 32))), q))\\n\\n                // B\\n                mstore(add(_pPairing, 64), calldataload(pB))\\n                mstore(add(_pPairing, 96), calldataload(add(pB, 32)))\\n                mstore(add(_pPairing, 128), calldataload(add(pB, 64)))\\n                mstore(add(_pPairing, 160), calldataload(add(pB, 96)))\\n\\n                // alpha1\\n                mstore(add(_pPairing, 192), alphax)\\n                mstore(add(_pPairing, 224), alphay)\\n\\n                // beta2\\n                mstore(add(_pPairing, 256), betax1)\\n                mstore(add(_pPairing, 288), betax2)\\n                mstore(add(_pPairing, 320), betay1)\\n                mstore(add(_pPairing, 352), betay2)\\n\\n                // vk_x\\n                mstore(add(_pPairing, 384), mload(add(pMem, pVk)))\\n                mstore(add(_pPairing, 416), mload(add(pMem, add(pVk, 32))))\\n\\n                // gamma2\\n                mstore(add(_pPairing, 448), gammax1)\\n                mstore(add(_pPairing, 480), gammax2)\\n                mstore(add(_pPairing, 512), gammay1)\\n                mstore(add(_pPairing, 544), gammay2)\\n\\n                // C\\n                mstore(add(_pPairing, 576), calldataload(pC))\\n                mstore(add(_pPairing, 608), calldataload(add(pC, 32)))\\n\\n                // delta2\\n                mstore(add(_pPairing, 640), deltax1)\\n                mstore(add(_pPairing, 672), deltax2)\\n                mstore(add(_pPairing, 704), deltay1)\\n                mstore(add(_pPairing, 736), deltay2)\\n\\n                let success := staticcall(sub(gas(), 2000), 8, _pPairing, 768, _pPairing, 0x20)\\n\\n                isOk := and(success, mload(_pPairing))\\n            }\\n\\n            let pMem := mload(0x40)\\n            mstore(0x40, add(pMem, pLastMem))\\n\\n            // Validate that all evaluations \\u2208 F\\n\\n            checkField(calldataload(add(_pubSignals, 0)))\\n\\n            checkField(calldataload(add(_pubSignals, 32)))\\n\\n            checkField(calldataload(add(_pubSignals, 64)))\\n\\n            checkField(calldataload(add(_pubSignals, 96)))\\n\\n            checkField(calldataload(add(_pubSignals, 128)))\\n\\n            // Validate all evaluations\\n            let isValid := checkPairing(_pA, _pB, _pC, _pubSignals, pMem)\\n\\n            mstore(0, isValid)\\n            return(0, 0x20)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x79d99a320bf8be9f9d0fd4b18135a7e02babf01af275983a89e5da8504c2614a\",\"license\":\"GPL-3.0\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n}\\n\",\"keccak256\":\"0x7434453e6d3b7d0e5d0eb7846ffdbc27f0ccf3b163591263739b628074dc103a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200379238038062003792833981810160405281019062000037919062000193565b6001600081905550600033426040516020016200005692919062000244565b604051602081830303815290604052805190602001209050806040516200007d906200011b565b8190604051809103906000f59050801580156200009e573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505062000274565b610745806200304d83390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200015b826200012e565b9050919050565b6200016d816200014e565b81146200017957600080fd5b50565b6000815190506200018d8162000162565b92915050565b600060208284031215620001ac57620001ab62000129565b5b6000620001bc848285016200017c565b91505092915050565b60008160601b9050919050565b6000620001df82620001c5565b9050919050565b6000620001f382620001d2565b9050919050565b6200020f62000209826200014e565b620001e6565b82525050565b6000819050919050565b6000819050919050565b6200023e620002388262000215565b6200021f565b82525050565b6000620002528285620001fa565b60148201915062000264828462000229565b6020820191508190509392505050565b608051612db6620002976000396000818161024c01526106e60152612db66000f3fe608060405234801561001057600080fd5b50600436106100ad5760003560e01c80635fe8c13b116100715780635fe8c13b146101545780636da5ceec146101845780638216ad7a146101a05780639935f95d146101bc578063d3a5b107146101ec578063e676031214610208576100ae565b80631aa3a008146100b05780632b7ac3f3146100ce5780634717e3c9146100ec57806348a4bab5146101085780635fc6fb0614610138576100ae565b5b005b6100b8610224565b6040516100c59190611eef565b60405180910390f35b6100d661024a565b6040516100e39190611f69565b60405180910390f35b61010660048036038101906101019190612030565b61026e565b005b610122600480360381019061011d9190612083565b6104a1565b60405161012f919061215b565b60405180910390f35b610152600480360381019061014d91906121e1565b610538565b005b61016e600480360381019061016991906121e1565b6107d1565b60405161017b9190612265565b60405180910390f35b61019e60048036038101906101999190612400565b610d51565b005b6101ba60048036038101906101b5919061246f565b611184565b005b6101d660048036038101906101d19190612083565b6113df565b6040516101e39190612546565b60405180910390f35b6102066004803603810190610201919061246f565b611483565b005b610222600480360381019061021d9190612568565b61178b565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b8260006001600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156102e4576001905061039f565b60005b6001600084815260200190815260200160002050600581101561039d5760016000848152602001908152602001600020600201816005811061032c5761032b6125bb565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561038a576001915061039d565b808061039590612619565b9150506102e7565b505b806103df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d6906126e5565b60405180910390fd5b6103e7611ab4565b6005841061042a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042190612751565b60405180910390fd5b82600160008781526020019081526020016000206002018560058110610453576104526125bb565b5b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061049a611b04565b5050505050565b6104a9611e5f565b6001600083815260200190815260200160002060020160058060200260405190810160405280929190826005801561052c576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116104e2575b50505050509050919050565b610540611ab4565b61056184600060028110610557576105566125bb565b5b6020020135611b0e565b61058284600160028110610578576105776125bb565b5b6020020135611b0e565b6105ba83600060028110610599576105986125bb565b5b604002016000600281106105b0576105af6125bb565b5b6020020135611b0e565b6105f2836000600281106105d1576105d06125bb565b5b604002016001600281106105e8576105e76125bb565b5b6020020135611b0e565b61062a83600160028110610609576106086125bb565b5b604002016000600281106106205761061f6125bb565b5b6020020135611b0e565b61066283600160028110610641576106406125bb565b5b60400201600160028110610658576106576125bb565b5b6020020135611b0e565b61068382600060028110610679576106786125bb565b5b6020020135611b0e565b6106a48260016002811061069a576106996125bb565b5b6020020135611b0e565b60005b60048110156106e3576106d08282600481106106c6576106c56125bb565b5b6020020135611b0e565b80806106db90612619565b9150506106a7565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635fe8c13b858585856040518563ffffffff1660e01b8152600401610743949392919061285f565b602060405180830381865afa158015610760573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078491906128bb565b6107c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ba90612934565b60405180910390fd5b6107cb611b04565b50505050565b6000610cee565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478110610809576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa91508161083f576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa91508161086f576000805260206000f35b505050505050565b600060808601600087017f279388a26a1469cdde3f30df161dbdf10e27ce7ead435e66d5c2a2098f8d0f0681527f1c262578e6885e8f27a2cd6187b07300991dc744aa02d528b528481edf19ec85602082015261091a60008801357f1c1d92aeeaa9372de1bc7887c4a4247416d7586614f04599f0af3e6fd9a1a5137f286a8102b8c3d1f851c36ad1c8108ff15c0dafb77794d58e3cf38bfd769f7fb08461080c565b61096a60208801357f0ae3ba8035f8d5014b8a57d1fd2c886d9eda7e8709f162960add8bdba0d6693b7f0e2b7af7afd0f9d743ceb8db8f315f709e296ea2d032afdea2546db9e3827f378461080c565b6109ba60408801357f16fb9adb378a72a0a21fb9dce2cead6cc8c07ead310e40bd331a12536b2490e07f25b163240658542ce8c6133d65468a8797c862b25ef6b7ed3a1f9de31a8a78818461080c565b610a0a60608801357f03407c16b4872ceaa6d209c7023491a82ee118e9e90927cd67965258ca53ede37f0ca097bbd8c8d267857100a90c0a43868ec8a6e6fc16bb07cfdc0ec32af924c68461080c565b833582527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208501357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020830152843560408301526020850135606083015260408501356080830152606085013560a08301527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08301527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08301527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008301527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208301527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408301527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec8610160830152600088015161018083015260206000018801516101a08301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220830152853561024083015260208601356102608301527f14cccd4e55b1c6dcbef61a8f4f221e239476f1ad17d5b95a09a7126db85c593a6102808301527f168f11abd07a1bcdd2cc6fa0db384aeb77da591f66991f50f3fa2e294d796c756102a08301527f164d8e9f28f3c9edad431f63d955ac347e43607dc0d003de36434ac15a8879906102c08301527f05b61d9924107e2f4d27ee5b14b320852f320e74a32b9e4acea46eb50f4014346102e08301526020826103008460086107d05a03fa82518116935050505095945050505050565b6040516103808101604052610d0660008401356107d8565b610d1360208401356107d8565b610d2060408401356107d8565b610d2d60608401356107d8565b610d3a60808401356107d8565b610d47818486888a610877565b8060005260206000f35b610d59611ab4565b60006001600085815260200190815260200160002060080160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414158015610e9857506001600084815260200190815260200160002060080160006001600086815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546001600085815260200190815260200160002060080160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054105b610ed7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ece906129ec565b60405180910390fd5b336001600085815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015610f5557600160008481526020019081526020016000206002016000610f549190611e81565b5b600073ffffffffffffffffffffffffffffffffffffffff1682600081518110610f8157610f806125bb565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146111775760005b825181101561117557600160008581526020019081526020016000206008016000848381518110610fdb57610fda6125bb565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546001600086815260200190815260200160002060080160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611162576001600085815260200190815260200160002060080160008483815181106110a3576110a26125bb565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090556001600085815260200190815260200160002060090161112385858481518110611116576111156125bb565b5b6020026020010151611ba7565b81548110611134576111336125bb565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b808061116d90612619565b915050610fa7565b505b61117f611b04565b505050565b8160006001600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156111fa57600190506112b5565b60005b600160008481526020019081526020016000205060058110156112b357600160008481526020019081526020016000206002018160058110611242576112416125bb565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156112a057600191506112b3565b80806112ab90612619565b9150506111fd565b505b806112f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ec906126e5565b60405180910390fd5b6112fd611ab4565b60056001600086815260200190815260200160002050600510611355576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134c90612a7e565b60405180910390fd5b826001600086815260200190815260200160002060020160016000878152602001908152602001600020506005808110611392576113916125bb565b5b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506113d9611b04565b50505050565b60606001600083815260200190815260200160002060090180548060200260200160405190810160405280929190818152602001828054801561147757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161142d575b50505050509050919050565b8160006001600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156114f957600190506115b4565b60005b600160008481526020019081526020016000205060058110156115b257600160008481526020019081526020016000206002018160058110611541576115406125bb565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561159f57600191506115b2565b80806115aa90612619565b9150506114fc565b505b806115f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115eb906126e5565b60405180910390fd5b6115fc611ab4565b60006001600086815260200190815260200160002060080160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561172857426001600086815260200190815260200160002060080160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060016000858152602001908152602001600020600901839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b826001600086815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611785611b04565b50505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461181b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181290612b10565b60405180910390fd5b611823611ab4565b61182c81611ca7565b9050600073ffffffffffffffffffffffffffffffffffffffff166001600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146118d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ca90612b7c565b60405180910390fd5b6118dc83611ce7565b6118e582611d80565b6118ee81611ce7565b816001600085815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550426001600085815260200190815260200160002060080160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060016000848152602001908152602001600020600901829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806001600085815260200190815260200160002060010181905550600060016000858152602001908152602001600020600701600083815260200190815260200160002060006101000a81548160ff021916908315150217905550827f4454071d8d9d80afa35872d7fbe0a33e682f0b60b27fa6dd449390cfaed1ab2c8383604051611a9f929190612bab565b60405180910390a2611aaf611b04565b505050565b60026000541415611afa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af190612c20565b60405180910390fd5b6002600081905550565b6001600081905550565b611ba481604051602401611b229190612c4f565b6040516020818303038152906040527ff82c50f1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611e19565b50565b600080600090505b60016000858152602001908152602001600020506005811015611c65578273ffffffffffffffffffffffffffffffffffffffff16600160008681526020019081526020016000206002018260058110611c0b57611c0a6125bb565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611c525780915050611ca1565b8080611c5d90612619565b915050611baf565b506040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9890612cb6565b60405180910390fd5b92915050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019050808360001c611cdc9190612d05565b60001b915050919050565b611d7d81604051602401611cfb9190612d36565b6040516020818303038152906040527f27b7cf85000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611e19565b50565b611e1681604051602401611d949190611eef565b6040516020818303038152906040527f2c2ecbc2000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611e19565b50565b611e3081611e28611e33611e54565b63ffffffff16565b50565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b611ea4819050919050565b6040518060a00160405280600590602082028036833780820191505090505090565b506000815560010160008155600101600081556001016000815560010160009055565b611eac612d51565b565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ed982611eae565b9050919050565b611ee981611ece565b82525050565b6000602082019050611f046000830184611ee0565b92915050565b6000819050919050565b6000611f2f611f2a611f2584611eae565b611f0a565b611eae565b9050919050565b6000611f4182611f14565b9050919050565b6000611f5382611f36565b9050919050565b611f6381611f48565b82525050565b6000602082019050611f7e6000830184611f5a565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611fab81611f98565b8114611fb657600080fd5b50565b600081359050611fc881611fa2565b92915050565b6000819050919050565b611fe181611fce565b8114611fec57600080fd5b50565b600081359050611ffe81611fd8565b92915050565b61200d81611ece565b811461201857600080fd5b50565b60008135905061202a81612004565b92915050565b60008060006060848603121561204957612048611f8e565b5b600061205786828701611fb9565b935050602061206886828701611fef565b92505060406120798682870161201b565b9150509250925092565b60006020828403121561209957612098611f8e565b5b60006120a784828501611fb9565b91505092915050565b600060059050919050565b600081905092915050565b6000819050919050565b6120d981611ece565b82525050565b60006120eb83836120d0565b60208301905092915050565b6000602082019050919050565b61210d816120b0565b61211781846120bb565b9250612122826120c6565b8060005b8381101561215357815161213a87826120df565b9650612145836120f7565b925050600181019050612126565b505050505050565b600060a0820190506121706000830184612104565b92915050565b600080fd5b60008190508260206002028201111561219757612196612176565b5b92915050565b6000819050826040600202820111156121b9576121b8612176565b5b92915050565b6000819050826020600402820111156121db576121da612176565b5b92915050565b60008060008061018085870312156121fc576121fb611f8e565b5b600061220a8782880161217b565b945050604061221b8782880161219d565b93505060c061222c8782880161217b565b92505061010061223e878288016121bf565b91505092959194509250565b60008115159050919050565b61225f8161224a565b82525050565b600060208201905061227a6000830184612256565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6122ce82612285565b810181811067ffffffffffffffff821117156122ed576122ec612296565b5b80604052505050565b6000612300611f84565b905061230c82826122c5565b919050565b600067ffffffffffffffff82111561232c5761232b612296565b5b602082029050602081019050919050565b600061235061234b84612311565b6122f6565b9050808382526020820190506020840283018581111561237357612372612176565b5b835b8181101561239c5780612388888261201b565b845260208401935050602081019050612375565b5050509392505050565b600082601f8301126123bb576123ba612280565b5b81356123cb84826020860161233d565b91505092915050565b6123dd8161224a565b81146123e857600080fd5b50565b6000813590506123fa816123d4565b92915050565b60008060006060848603121561241957612418611f8e565b5b600061242786828701611fb9565b935050602084013567ffffffffffffffff81111561244857612447611f93565b5b612454868287016123a6565b9250506040612465868287016123eb565b9150509250925092565b6000806040838503121561248657612485611f8e565b5b600061249485828601611fb9565b92505060206124a58582860161201b565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000602082019050919050565b60006124f3826124af565b6124fd81856124ba565b9350612508836124cb565b8060005b8381101561253957815161252088826120df565b975061252b836124db565b92505060018101905061250c565b5085935050505092915050565b6000602082019050818103600083015261256081846124e8565b905092915050565b60008060006060848603121561258157612580611f8e565b5b600061258f86828701611fb9565b93505060206125a08682870161201b565b92505060406125b186828701611fb9565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061262482611fce565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612657576126566125ea565b5b600182019050919050565b600082825260208201905092915050565b7f4f6e6c7920746865206f776e6572206f72206173736f6369617465642061646460008201527f726573732063616e2063616c6c20746869732066756e6374696f6e0000000000602082015250565b60006126cf603b83612662565b91506126da82612673565b604082019050919050565b600060208201905081810360008301526126fe816126c2565b9050919050565b7f54686520696e646578206973206265747765656e20307e340000000000000000600082015250565b600061273b601883612662565b915061274682612705565b602082019050919050565b6000602082019050818103600083015261276a8161272e565b9050919050565b82818337600083830152505050565b61278c60408383612771565b5050565b600060029050919050565b600081905092915050565b6000819050919050565b6127bc60408383612771565b5050565b60006127cc83836127b0565b60408301905092915050565b600082905092915050565b6000604082019050919050565b6127f981612790565b612803818461279b565b925061280e826127a6565b8060005b838110156128475761282482846127d8565b61282e87826127c0565b9650612839836127e3565b925050600181019050612812565b505050505050565b61285b60808383612771565b5050565b6000610180820190506128756000830187612780565b61288260408301866127f0565b61288f60c0830185612780565b61289d61010083018461284f565b95945050505050565b6000815190506128b5816123d4565b92915050565b6000602082840312156128d1576128d0611f8e565b5b60006128df848285016128a6565b91505092915050565b7f50726f6f66206973206e6f742076616c69640000000000000000000000000000600082015250565b600061291e601283612662565b9150612929826128e8565b602082019050919050565b6000602082019050818103600083015261294d81612911565b9050919050565b7f6d73672e73656e646572206e6f7420696e206f776e6572486973746f7279206f60008201527f72207468652074696d65206973206c61746572207468616e2063757272656e7460208201527f206f776e65720000000000000000000000000000000000000000000000000000604082015250565b60006129d6604683612662565b91506129e182612954565b606082019050919050565b60006020820190508181036000830152612a05816129c9565b9050919050565b7f546865206e756d626572206f66206173736f636961746564206164647265737360008201527f20697320757020746f2035000000000000000000000000000000000000000000602082015250565b6000612a68602b83612662565b9150612a7382612a0c565b604082019050919050565b60006020820190508181036000830152612a9781612a5b565b9050919050565b7f4f6e6c792074686520726567697374657220636f6e74726163742063616e206360008201527f616c6c20746869732066756e6374696f6e000000000000000000000000000000602082015250565b6000612afa603183612662565b9150612b0582612a9e565b604082019050919050565b60006020820190508181036000830152612b2981612aed565b9050919050565b7f4964656e7469747920616c726561647920657869737473000000000000000000600082015250565b6000612b66601783612662565b9150612b7182612b30565b602082019050919050565b60006020820190508181036000830152612b9581612b59565b9050919050565b612ba581611f98565b82525050565b6000604082019050612bc06000830185611ee0565b612bcd6020830184612b9c565b9392505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612c0a601f83612662565b9150612c1582612bd4565b602082019050919050565b60006020820190508181036000830152612c3981612bfd565b9050919050565b612c4981611fce565b82525050565b6000602082019050612c646000830184612c40565b92915050565b7f496e646578206e6f7420666f756e642100000000000000000000000000000000600082015250565b6000612ca0601083612662565b9150612cab82612c6a565b602082019050919050565b60006020820190508181036000830152612ccf81612c93565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612d1082611fce565b9150612d1b83611fce565b925082612d2b57612d2a612cd6565b5b828206905092915050565b6000602082019050612d4b6000830184612b9c565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfea2646970667358221220c3cd9a0ad9ee30c715451f9004fa9ec6d4b945fe9e8c69a96d95059f8c3729a064736f6c634300080b0033608060405234801561001057600080fd5b50610725806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80635fe8c13b14610030575b600080fd5b61004a60048036038101906100459190610650565b610060565b60405161005791906106d4565b60405180910390f35b600061057d565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478110610098576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa9150816100ce576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa9150816100fe576000805260206000f35b505050505050565b600060808601600087017f279388a26a1469cdde3f30df161dbdf10e27ce7ead435e66d5c2a2098f8d0f0681527f1c262578e6885e8f27a2cd6187b07300991dc744aa02d528b528481edf19ec8560208201526101a960008801357f1c1d92aeeaa9372de1bc7887c4a4247416d7586614f04599f0af3e6fd9a1a5137f286a8102b8c3d1f851c36ad1c8108ff15c0dafb77794d58e3cf38bfd769f7fb08461009b565b6101f960208801357f0ae3ba8035f8d5014b8a57d1fd2c886d9eda7e8709f162960add8bdba0d6693b7f0e2b7af7afd0f9d743ceb8db8f315f709e296ea2d032afdea2546db9e3827f378461009b565b61024960408801357f16fb9adb378a72a0a21fb9dce2cead6cc8c07ead310e40bd331a12536b2490e07f25b163240658542ce8c6133d65468a8797c862b25ef6b7ed3a1f9de31a8a78818461009b565b61029960608801357f03407c16b4872ceaa6d209c7023491a82ee118e9e90927cd67965258ca53ede37f0ca097bbd8c8d267857100a90c0a43868ec8a6e6fc16bb07cfdc0ec32af924c68461009b565b833582527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208501357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020830152843560408301526020850135606083015260408501356080830152606085013560a08301527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08301527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08301527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008301527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208301527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408301527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec8610160830152600088015161018083015260206000018801516101a08301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220830152853561024083015260208601356102608301527f14cccd4e55b1c6dcbef61a8f4f221e239476f1ad17d5b95a09a7126db85c593a6102808301527f168f11abd07a1bcdd2cc6fa0db384aeb77da591f66991f50f3fa2e294d796c756102a08301527f164d8e9f28f3c9edad431f63d955ac347e43607dc0d003de36434ac15a8879906102c08301527f05b61d9924107e2f4d27ee5b14b320852f320e74a32b9e4acea46eb50f4014346102e08301526020826103008460086107d05a03fa82518116935050505095945050505050565b60405161038081016040526105956000840135610067565b6105a26020840135610067565b6105af6040840135610067565b6105bc6060840135610067565b6105c96080840135610067565b6105d6818486888a610106565b8060005260206000f35b600080fd5b600080fd5b600081905082602060020282011115610606576106056105e5565b5b92915050565b600081905082604060020282011115610628576106276105e5565b5b92915050565b60008190508260206004028201111561064a576106496105e5565b5b92915050565b600080600080610180858703121561066b5761066a6105e0565b5b6000610679878288016105ea565b945050604061068a8782880161060c565b93505060c061069b878288016105ea565b9250506101006106ad8782880161062e565b91505092959194509250565b60008115159050919050565b6106ce816106b9565b82525050565b60006020820190506106e960008301846106c5565b9291505056fea264697066735822122044aecedf8ed378a0fdb6ec6420d83f152eaa8e486c2a45b6271b1330378d0aba64736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ad5760003560e01c80635fe8c13b116100715780635fe8c13b146101545780636da5ceec146101845780638216ad7a146101a05780639935f95d146101bc578063d3a5b107146101ec578063e676031214610208576100ae565b80631aa3a008146100b05780632b7ac3f3146100ce5780634717e3c9146100ec57806348a4bab5146101085780635fc6fb0614610138576100ae565b5b005b6100b8610224565b6040516100c59190611eef565b60405180910390f35b6100d661024a565b6040516100e39190611f69565b60405180910390f35b61010660048036038101906101019190612030565b61026e565b005b610122600480360381019061011d9190612083565b6104a1565b60405161012f919061215b565b60405180910390f35b610152600480360381019061014d91906121e1565b610538565b005b61016e600480360381019061016991906121e1565b6107d1565b60405161017b9190612265565b60405180910390f35b61019e60048036038101906101999190612400565b610d51565b005b6101ba60048036038101906101b5919061246f565b611184565b005b6101d660048036038101906101d19190612083565b6113df565b6040516101e39190612546565b60405180910390f35b6102066004803603810190610201919061246f565b611483565b005b610222600480360381019061021d9190612568565b61178b565b005b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b8260006001600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156102e4576001905061039f565b60005b6001600084815260200190815260200160002050600581101561039d5760016000848152602001908152602001600020600201816005811061032c5761032b6125bb565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561038a576001915061039d565b808061039590612619565b9150506102e7565b505b806103df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103d6906126e5565b60405180910390fd5b6103e7611ab4565b6005841061042a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042190612751565b60405180910390fd5b82600160008781526020019081526020016000206002018560058110610453576104526125bb565b5b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061049a611b04565b5050505050565b6104a9611e5f565b6001600083815260200190815260200160002060020160058060200260405190810160405280929190826005801561052c576020028201915b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116104e2575b50505050509050919050565b610540611ab4565b61056184600060028110610557576105566125bb565b5b6020020135611b0e565b61058284600160028110610578576105776125bb565b5b6020020135611b0e565b6105ba83600060028110610599576105986125bb565b5b604002016000600281106105b0576105af6125bb565b5b6020020135611b0e565b6105f2836000600281106105d1576105d06125bb565b5b604002016001600281106105e8576105e76125bb565b5b6020020135611b0e565b61062a83600160028110610609576106086125bb565b5b604002016000600281106106205761061f6125bb565b5b6020020135611b0e565b61066283600160028110610641576106406125bb565b5b60400201600160028110610658576106576125bb565b5b6020020135611b0e565b61068382600060028110610679576106786125bb565b5b6020020135611b0e565b6106a48260016002811061069a576106996125bb565b5b6020020135611b0e565b60005b60048110156106e3576106d08282600481106106c6576106c56125bb565b5b6020020135611b0e565b80806106db90612619565b9150506106a7565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635fe8c13b858585856040518563ffffffff1660e01b8152600401610743949392919061285f565b602060405180830381865afa158015610760573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061078491906128bb565b6107c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ba90612934565b60405180910390fd5b6107cb611b04565b50505050565b6000610cee565b7f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd478110610809576000805260206000f35b50565b600060405183815284602082015285604082015260408160608360076107d05a03fa91508161083f576000805260206000f35b825160408201526020830151606082015260408360808360066107d05a03fa91508161086f576000805260206000f35b505050505050565b600060808601600087017f279388a26a1469cdde3f30df161dbdf10e27ce7ead435e66d5c2a2098f8d0f0681527f1c262578e6885e8f27a2cd6187b07300991dc744aa02d528b528481edf19ec85602082015261091a60008801357f1c1d92aeeaa9372de1bc7887c4a4247416d7586614f04599f0af3e6fd9a1a5137f286a8102b8c3d1f851c36ad1c8108ff15c0dafb77794d58e3cf38bfd769f7fb08461080c565b61096a60208801357f0ae3ba8035f8d5014b8a57d1fd2c886d9eda7e8709f162960add8bdba0d6693b7f0e2b7af7afd0f9d743ceb8db8f315f709e296ea2d032afdea2546db9e3827f378461080c565b6109ba60408801357f16fb9adb378a72a0a21fb9dce2cead6cc8c07ead310e40bd331a12536b2490e07f25b163240658542ce8c6133d65468a8797c862b25ef6b7ed3a1f9de31a8a78818461080c565b610a0a60608801357f03407c16b4872ceaa6d209c7023491a82ee118e9e90927cd67965258ca53ede37f0ca097bbd8c8d267857100a90c0a43868ec8a6e6fc16bb07cfdc0ec32af924c68461080c565b833582527f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4760208501357f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4703066020830152843560408301526020850135606083015260408501356080830152606085013560a08301527f2d4d9aa7e302d9df41749d5507949d05dbea33fbb16c643b22f599a2be6df2e260c08301527f14bedd503c37ceb061d8ec60209fe345ce89830a19230301f076caff004d192660e08301527f0967032fcbf776d1afc985f88877f182d38480a653f2decaa9794cbc3bf3060c6101008301527f0e187847ad4c798374d0d6732bf501847dd68bc0e071241e0213bc7fc13db7ab6101208301527f304cfbd1e08a704a99f5e847d93f8c3caafddec46b7a0d379da69a4d112346a76101408301527f1739c1b1a457a8c7313123d24d2f9192f896b7c63eea05a9d57f06547ad0cec8610160830152600088015161018083015260206000018801516101a08301527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c26101c08301527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6101e08301527f090689d0585ff075ec9e99ad690c3395bc4b313370b38ef355acdadcd122975b6102008301527f12c85ea5db8c6deb4aab71808dcb408fe3d1e7690c43d37b4ce6cc0166fa7daa610220830152853561024083015260208601356102608301527f14cccd4e55b1c6dcbef61a8f4f221e239476f1ad17d5b95a09a7126db85c593a6102808301527f168f11abd07a1bcdd2cc6fa0db384aeb77da591f66991f50f3fa2e294d796c756102a08301527f164d8e9f28f3c9edad431f63d955ac347e43607dc0d003de36434ac15a8879906102c08301527f05b61d9924107e2f4d27ee5b14b320852f320e74a32b9e4acea46eb50f4014346102e08301526020826103008460086107d05a03fa82518116935050505095945050505050565b6040516103808101604052610d0660008401356107d8565b610d1360208401356107d8565b610d2060408401356107d8565b610d2d60608401356107d8565b610d3a60808401356107d8565b610d47818486888a610877565b8060005260206000f35b610d59611ab4565b60006001600085815260200190815260200160002060080160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414158015610e9857506001600084815260200190815260200160002060080160006001600086815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546001600085815260200190815260200160002060080160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054105b610ed7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ece906129ec565b60405180910390fd5b336001600085815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508015610f5557600160008481526020019081526020016000206002016000610f549190611e81565b5b600073ffffffffffffffffffffffffffffffffffffffff1682600081518110610f8157610f806125bb565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff16146111775760005b825181101561117557600160008581526020019081526020016000206008016000848381518110610fdb57610fda6125bb565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546001600086815260200190815260200160002060080160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611162576001600085815260200190815260200160002060080160008483815181106110a3576110a26125bb565b5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600090556001600085815260200190815260200160002060090161112385858481518110611116576111156125bb565b5b6020026020010151611ba7565b81548110611134576111336125bb565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b808061116d90612619565b915050610fa7565b505b61117f611b04565b505050565b8160006001600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156111fa57600190506112b5565b60005b600160008481526020019081526020016000205060058110156112b357600160008481526020019081526020016000206002018160058110611242576112416125bb565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156112a057600191506112b3565b80806112ab90612619565b9150506111fd565b505b806112f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112ec906126e5565b60405180910390fd5b6112fd611ab4565b60056001600086815260200190815260200160002050600510611355576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134c90612a7e565b60405180910390fd5b826001600086815260200190815260200160002060020160016000878152602001908152602001600020506005808110611392576113916125bb565b5b0160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506113d9611b04565b50505050565b60606001600083815260200190815260200160002060090180548060200260200160405190810160405280929190818152602001828054801561147757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001906001019080831161142d575b50505050509050919050565b8160006001600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614156114f957600190506115b4565b60005b600160008481526020019081526020016000205060058110156115b257600160008481526020019081526020016000206002018160058110611541576115406125bb565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141561159f57600191506115b2565b80806115aa90612619565b9150506114fc565b505b806115f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115eb906126e5565b60405180910390fd5b6115fc611ab4565b60006001600086815260200190815260200160002060080160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054141561172857426001600086815260200190815260200160002060080160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060016000858152602001908152602001600020600901839080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b826001600086815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611785611b04565b50505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461181b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181290612b10565b60405180910390fd5b611823611ab4565b61182c81611ca7565b9050600073ffffffffffffffffffffffffffffffffffffffff166001600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146118d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ca90612b7c565b60405180910390fd5b6118dc83611ce7565b6118e582611d80565b6118ee81611ce7565b816001600085815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550426001600085815260200190815260200160002060080160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060016000848152602001908152602001600020600901829080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806001600085815260200190815260200160002060010181905550600060016000858152602001908152602001600020600701600083815260200190815260200160002060006101000a81548160ff021916908315150217905550827f4454071d8d9d80afa35872d7fbe0a33e682f0b60b27fa6dd449390cfaed1ab2c8383604051611a9f929190612bab565b60405180910390a2611aaf611b04565b505050565b60026000541415611afa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611af190612c20565b60405180910390fd5b6002600081905550565b6001600081905550565b611ba481604051602401611b229190612c4f565b6040516020818303038152906040527ff82c50f1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611e19565b50565b600080600090505b60016000858152602001908152602001600020506005811015611c65578273ffffffffffffffffffffffffffffffffffffffff16600160008681526020019081526020016000206002018260058110611c0b57611c0a6125bb565b5b0160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611c525780915050611ca1565b8080611c5d90612619565b915050611baf565b506040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c9890612cb6565b60405180910390fd5b92915050565b6000807f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000019050808360001c611cdc9190612d05565b60001b915050919050565b611d7d81604051602401611cfb9190612d36565b6040516020818303038152906040527f27b7cf85000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611e19565b50565b611e1681604051602401611d949190611eef565b6040516020818303038152906040527f2c2ecbc2000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611e19565b50565b611e3081611e28611e33611e54565b63ffffffff16565b50565b60006a636f6e736f6c652e6c6f679050600080835160208501845afa505050565b611ea4819050919050565b6040518060a00160405280600590602082028036833780820191505090505090565b506000815560010160008155600101600081556001016000815560010160009055565b611eac612d51565b565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611ed982611eae565b9050919050565b611ee981611ece565b82525050565b6000602082019050611f046000830184611ee0565b92915050565b6000819050919050565b6000611f2f611f2a611f2584611eae565b611f0a565b611eae565b9050919050565b6000611f4182611f14565b9050919050565b6000611f5382611f36565b9050919050565b611f6381611f48565b82525050565b6000602082019050611f7e6000830184611f5a565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b611fab81611f98565b8114611fb657600080fd5b50565b600081359050611fc881611fa2565b92915050565b6000819050919050565b611fe181611fce565b8114611fec57600080fd5b50565b600081359050611ffe81611fd8565b92915050565b61200d81611ece565b811461201857600080fd5b50565b60008135905061202a81612004565b92915050565b60008060006060848603121561204957612048611f8e565b5b600061205786828701611fb9565b935050602061206886828701611fef565b92505060406120798682870161201b565b9150509250925092565b60006020828403121561209957612098611f8e565b5b60006120a784828501611fb9565b91505092915050565b600060059050919050565b600081905092915050565b6000819050919050565b6120d981611ece565b82525050565b60006120eb83836120d0565b60208301905092915050565b6000602082019050919050565b61210d816120b0565b61211781846120bb565b9250612122826120c6565b8060005b8381101561215357815161213a87826120df565b9650612145836120f7565b925050600181019050612126565b505050505050565b600060a0820190506121706000830184612104565b92915050565b600080fd5b60008190508260206002028201111561219757612196612176565b5b92915050565b6000819050826040600202820111156121b9576121b8612176565b5b92915050565b6000819050826020600402820111156121db576121da612176565b5b92915050565b60008060008061018085870312156121fc576121fb611f8e565b5b600061220a8782880161217b565b945050604061221b8782880161219d565b93505060c061222c8782880161217b565b92505061010061223e878288016121bf565b91505092959194509250565b60008115159050919050565b61225f8161224a565b82525050565b600060208201905061227a6000830184612256565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6122ce82612285565b810181811067ffffffffffffffff821117156122ed576122ec612296565b5b80604052505050565b6000612300611f84565b905061230c82826122c5565b919050565b600067ffffffffffffffff82111561232c5761232b612296565b5b602082029050602081019050919050565b600061235061234b84612311565b6122f6565b9050808382526020820190506020840283018581111561237357612372612176565b5b835b8181101561239c5780612388888261201b565b845260208401935050602081019050612375565b5050509392505050565b600082601f8301126123bb576123ba612280565b5b81356123cb84826020860161233d565b91505092915050565b6123dd8161224a565b81146123e857600080fd5b50565b6000813590506123fa816123d4565b92915050565b60008060006060848603121561241957612418611f8e565b5b600061242786828701611fb9565b935050602084013567ffffffffffffffff81111561244857612447611f93565b5b612454868287016123a6565b9250506040612465868287016123eb565b9150509250925092565b6000806040838503121561248657612485611f8e565b5b600061249485828601611fb9565b92505060206124a58582860161201b565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000602082019050919050565b60006124f3826124af565b6124fd81856124ba565b9350612508836124cb565b8060005b8381101561253957815161252088826120df565b975061252b836124db565b92505060018101905061250c565b5085935050505092915050565b6000602082019050818103600083015261256081846124e8565b905092915050565b60008060006060848603121561258157612580611f8e565b5b600061258f86828701611fb9565b93505060206125a08682870161201b565b92505060406125b186828701611fb9565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061262482611fce565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612657576126566125ea565b5b600182019050919050565b600082825260208201905092915050565b7f4f6e6c7920746865206f776e6572206f72206173736f6369617465642061646460008201527f726573732063616e2063616c6c20746869732066756e6374696f6e0000000000602082015250565b60006126cf603b83612662565b91506126da82612673565b604082019050919050565b600060208201905081810360008301526126fe816126c2565b9050919050565b7f54686520696e646578206973206265747765656e20307e340000000000000000600082015250565b600061273b601883612662565b915061274682612705565b602082019050919050565b6000602082019050818103600083015261276a8161272e565b9050919050565b82818337600083830152505050565b61278c60408383612771565b5050565b600060029050919050565b600081905092915050565b6000819050919050565b6127bc60408383612771565b5050565b60006127cc83836127b0565b60408301905092915050565b600082905092915050565b6000604082019050919050565b6127f981612790565b612803818461279b565b925061280e826127a6565b8060005b838110156128475761282482846127d8565b61282e87826127c0565b9650612839836127e3565b925050600181019050612812565b505050505050565b61285b60808383612771565b5050565b6000610180820190506128756000830187612780565b61288260408301866127f0565b61288f60c0830185612780565b61289d61010083018461284f565b95945050505050565b6000815190506128b5816123d4565b92915050565b6000602082840312156128d1576128d0611f8e565b5b60006128df848285016128a6565b91505092915050565b7f50726f6f66206973206e6f742076616c69640000000000000000000000000000600082015250565b600061291e601283612662565b9150612929826128e8565b602082019050919050565b6000602082019050818103600083015261294d81612911565b9050919050565b7f6d73672e73656e646572206e6f7420696e206f776e6572486973746f7279206f60008201527f72207468652074696d65206973206c61746572207468616e2063757272656e7460208201527f206f776e65720000000000000000000000000000000000000000000000000000604082015250565b60006129d6604683612662565b91506129e182612954565b606082019050919050565b60006020820190508181036000830152612a05816129c9565b9050919050565b7f546865206e756d626572206f66206173736f636961746564206164647265737360008201527f20697320757020746f2035000000000000000000000000000000000000000000602082015250565b6000612a68602b83612662565b9150612a7382612a0c565b604082019050919050565b60006020820190508181036000830152612a9781612a5b565b9050919050565b7f4f6e6c792074686520726567697374657220636f6e74726163742063616e206360008201527f616c6c20746869732066756e6374696f6e000000000000000000000000000000602082015250565b6000612afa603183612662565b9150612b0582612a9e565b604082019050919050565b60006020820190508181036000830152612b2981612aed565b9050919050565b7f4964656e7469747920616c726561647920657869737473000000000000000000600082015250565b6000612b66601783612662565b9150612b7182612b30565b602082019050919050565b60006020820190508181036000830152612b9581612b59565b9050919050565b612ba581611f98565b82525050565b6000604082019050612bc06000830185611ee0565b612bcd6020830184612b9c565b9392505050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000612c0a601f83612662565b9150612c1582612bd4565b602082019050919050565b60006020820190508181036000830152612c3981612bfd565b9050919050565b612c4981611fce565b82525050565b6000602082019050612c646000830184612c40565b92915050565b7f496e646578206e6f7420666f756e642100000000000000000000000000000000600082015250565b6000612ca0601083612662565b9150612cab82612c6a565b602082019050919050565b60006020820190508181036000830152612ccf81612c93565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612d1082611fce565b9150612d1b83611fce565b925082612d2b57612d2a612cd6565b5b828206905092915050565b6000602082019050612d4b6000830184612b9c565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052605160045260246000fdfea2646970667358221220c3cd9a0ad9ee30c715451f9004fa9ec6d4b945fe9e8c69a96d95059f8c3729a064736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/NewIdentity.sol:NewIdentity",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 101,
        "contract": "contracts/NewIdentity.sol:NewIdentity",
        "label": "identities",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(Identity)93_storage)"
      },
      {
        "astId": 103,
        "contract": "contracts/NewIdentity.sol:NewIdentity",
        "label": "register",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)5_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[5]",
        "numberOfBytes": "160"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_bytes32,t_struct(Identity)93_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct NewIdentity.Identity)",
        "numberOfBytes": "32",
        "value": "t_struct(Identity)93_storage"
      },
      "t_struct(Identity)93_storage": {
        "encoding": "inplace",
        "label": "struct NewIdentity.Identity",
        "members": [
          {
            "astId": 75,
            "contract": "contracts/NewIdentity.sol:NewIdentity",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 77,
            "contract": "contracts/NewIdentity.sol:NewIdentity",
            "label": "root",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 81,
            "contract": "contracts/NewIdentity.sol:NewIdentity",
            "label": "assciatedAddress",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)5_storage"
          },
          {
            "astId": 85,
            "contract": "contracts/NewIdentity.sol:NewIdentity",
            "label": "used",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_bytes32,t_bool)"
          },
          {
            "astId": 89,
            "contract": "contracts/NewIdentity.sol:NewIdentity",
            "label": "ownerHistory",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 92,
            "contract": "contracts/NewIdentity.sol:NewIdentity",
            "label": "ownerKeys",
            "offset": 0,
            "slot": "9",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "320"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}